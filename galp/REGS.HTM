<!DOCTYPE HTML PUBLIC "-//SQ//DTD HTML 2.0 HoTMetaL + extensions//EN">
<HTML><HEAD><TITLE>GameBoy Assembly Language Primer - Registers</TITLE></HEAD>
<BODY><CENTER><H2>GameBoy Assembly Language Primer</H2></CENTER>
<HR>
<CENTER><H2>GameBoy CPU Registers</H2></CENTER>
<P>The GameBoy has instructions &amp; registers similar to the Intel 8080,
Intel 8085, &amp; Zilog Z80 microprocessors. It has eight 8-bit registers
A,B,C,D,E,F,H,L and two 16-bit registers SP &amp; PC:</P>
<CENTER><TABLE BORDER="1" WIDTH="200"><TR><TD COLSTART="1" ALIGN="CENTER">15....8</TD>
<TD COLSTART="2" ALIGN="CENTER">7......0</TD></TR><TR><TD
COLSTART="1" WIDTH="10" ALIGN="CENTER"><STRONG>A</STRONG></TD><TD
COLSTART="2" ALIGN="CENTER"><STRONG>F</STRONG></TD></TR><TR><TD
COLSTART="1" ALIGN="CENTER"><STRONG>B</STRONG></TD><TD
COLSTART="2" ALIGN="CENTER"><STRONG>C</STRONG></TD></TR><TR><TD
COLSTART="1" ALIGN="CENTER"><STRONG>D</STRONG></TD><TD
COLSTART="2" ALIGN="CENTER"><STRONG>E</STRONG></TD></TR><TR><TD
COLSTART="1" ALIGN="CENTER"><STRONG>H</STRONG></TD><TD
COLSTART="2" ALIGN="CENTER"><STRONG>L</STRONG></TD></TR><TR><TD
COLSTART="1" COLSPAN="2" ALIGN="CENTER"><STRONG>SP</STRONG></TD></TR><TR><TD
COLSTART="1" COLSPAN="2" ALIGN="CENTER"><STRONG>PC</STRONG></TD></TR></TABLE></CENTER>
<P>Some instructions, however, allow you to use the registers A,B,C,D,E,H, &amp;
L as 16-bit registers by pairing them up in the following manner: <STRONG>AF,BC,DE,
&amp; HL</STRONG>. The <STRONG>F</STRONG> register is indirectly accessible by
the programmer and is used to store the results of various math operations.</P>
<P>The <STRONG>PC</STRONG>, or Program Counter, register points to the next
instruction to be executed in the GameBoy memory. The <STRONG>SP</STRONG>, or
Stack Pointer, register points to the current stack position.</P>
<HR>
<H2>Program Counter</H2>
<P>On power up, the GameBoy Program Counter is initialized to $100 (100 hex)
and the instruction found at this location in ROM is executed. The Program
Counter from this point on is controlled, indirectly, by the program
instructions themselves that were generated by the programmer of the ROM cart.</P>
<H2>Stack Pointer</H2>
<P>A big key to understanding programming in assembly language on the GameBoy
is understanding the concept of a stack pointer. A familiarity with assembly
language for other processors helps greatly as the concepts are the same.</P>
<P>The GameBoy Stack Pointer is used to keep track of the top of the &quot;stack&quot;.
The stack is used for saving variables, saving return addresses, passing
arguments to subroutines, and various other uses that might be conceived by the
individual programmer.</P>
<P>The instructions CALL, PUSH, and RST all put information onto the stack. The
instructions POP, RET, and RETI all take information off of the stack.
(Interrupts put a return address on the stack and remove it at their completion
as well.) As information is put onto the stack, the stack grows downward in RAM
memory. As a result, the Stack Pointer should always be initialized at the
highest location of RAM space that has been allocated for use by the stack. For
instance, if a programmer wishes to locate the Stack Pointer at the top of low
RAM space ($C000-$DFFF) he would set the Stack Pointer to $E000 using the
command <STRONG>LD SP,$E000</STRONG>. (The Stack Pointer automatically
decrements before it puts something onto the stack so it is perfectly acceptable
to assign it a value which points to a memory address which is one location past
the end of available RAM.)</P>
<P>The GameBoy stack pointer is initialized to $FFFE on power up but a
programmer should not rely on this setting and rather should explicitly set its
value.</P>
<H2>Flag Register</H2>
<CENTER><TABLE BORDER="1" WIDTH="200"><TR><TD COLSTART="1">7</TD><TD
COLSTART="2">6</TD><TD COLSTART="3">5</TD><TD COLSTART="4">4</TD><TD
COLSTART="5">3</TD><TD COLSTART="6">2</TD><TD COLSTART="7">1</TD><TD
COLSTART="8">0</TD></TR><TR><TD COLSTART="1"><STRONG>Z</STRONG></TD><TD
COLSTART="2"><STRONG>N</STRONG></TD><TD COLSTART="3"><STRONG>H</STRONG></TD><TD
COLSTART="4"><STRONG>C</STRONG></TD><TD COLSTART="5"><STRONG>0</STRONG></TD><TD
COLSTART="6"><STRONG>0</STRONG></TD>
<TD COLSTART="7"><STRONG>0</STRONG></TD><TD COLSTART="8"><STRONG>0</STRONG></TD></TR></TABLE></CENTER>
<UL>
<LI><STRONG>Zero Flag (Z)</STRONG> - This bit is set when the result of a math
operation is zero or two values match when using the CP instruction. 	</LI>
<LI><STRONG>Subtract Flag (N)</STRONG> - This bit is set if a subtraction was
performed in the last math instruction.</LI>
<LI><STRONG>Half Carry Flag (H)</STRONG> - This bit is set if a carry occurred
from the lower nibble in the last math operation.</LI>
<LI><STRONG>Carry Flag (C)</STRONG> - This bit is set if a carry occurred from
the last math operation or if register A is the smaller value when executing the
CP instruction.</LI>
</UL>
<HR></BODY></HTML>
